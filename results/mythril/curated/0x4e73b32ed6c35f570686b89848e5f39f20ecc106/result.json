{
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 517,
        "code": "balances[msg.sender]+= msg.value",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf8024800f404b6cde75f2ff77bdebbd934dfda63bee897ebbeda5eb6df597879\ncallvalue: 0x51fa46168060ffc0ae40ae067bd0a3d355df95723fd6e7fb3e9e88f0d8160641\ncalldata_PRIVATE_ETH_CELL_0: 0x0\ncalldatasize_PRIVATE_ETH_CELL: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
        "function": "fallback",
        "lineno": 43,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 781,
        "code": "Log.AddMessage(msg.sender,msg.value,\"Put\")",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
        "function": "fallback",
        "lineno": 44,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 781,
        "code": "Log.AddMessage(msg.sender,msg.value,\"Put\")",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/data/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
        "function": "fallback",
        "lineno": 44,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1111,
        "code": "msg.sender.call.value(_am)()",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
        "function": "Collect(uint256)",
        "lineno": 54,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1111,
        "code": "msg.sender.call.value(_am)()",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1453\n",
        "filename": "/data/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
        "function": "Collect(uint256)",
        "lineno": 54,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1453,
        "code": "Log.AddMessage(msg.sender,_am,\"Collect\")",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
        "function": "Collect(uint256)",
        "lineno": 57,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1453,
        "code": "Log.AddMessage(msg.sender,_am,\"Collect\")",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function Collect(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/data/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
        "function": "Collect(uint256)",
        "lineno": 57,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  },
  "contract": "dataset/reentrancy/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol",
  "duration": 9.05791449546814,
  "end": 1654006864.1237886,
  "exit_code": 0,
  "start": 1654006855.065874,
  "tool": "mythril"
}