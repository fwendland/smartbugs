{
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1089,
        "code": "tx.origin",
        "debug": "",
        "description": "Function wager() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "wager()",
        "lineno": 30,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 1481,
        "code": "tx.origin",
        "debug": "",
        "description": "Function play() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "play()",
        "lineno": 30,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 2051,
        "code": "uint256(keccak256(abi.encodePacked(blockhash(blockNumber),  msg.sender)))%difficulty",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nblock_number: 0x2\norigin: 0x0\ncaller: 0x0\nstorage_7: 0xff00\ncalldata_PoCGame_0: 0x93e84cd900000000000000000000000000000000000000000000000000000000\ncalldatasize_PoCGame: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "play()",
        "lineno": 150,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2558,
        "code": "ERC20Interface(tokenAddress).transfer(tokenOwner, tokens)",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "transferAnyERC20Token(address,address,uint256)",
        "lineno": 286,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3178,
        "code": "whale.call.value(amount)(bytes4(keccak256(\"donate()\")))",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "play()",
        "lineno": 210,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3178,
        "code": "whale.call.value(amount)(bytes4(keccak256(\"donate()\")))",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "play()",
        "lineno": 210,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3199,
        "code": "totalDonated += amount",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "play()",
        "lineno": 211,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3513,
        "code": "whale.call.value(amount)(bytes4(keccak256(\"donate()\")))",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "donate()",
        "lineno": 198,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3513,
        "code": "whale.call.value(amount)(bytes4(keccak256(\"donate()\")))",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "donate()",
        "lineno": 198,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3528,
        "code": "totalDonated += amount",
        "debug": "storage_8: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_7: 0xff00\ncalldata_PoCGame_0: 0xed88c68e00000000000000000000000000000000000000000000000000000000\ncalldatasize_PoCGame: 0x4\n",
        "description": "A possible integer overflow exists in the function `donate()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "donate()",
        "lineno": 199,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3534,
        "code": "totalDonated += amount",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/data/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
        "function": "donate()",
        "lineno": 199,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  },
  "contract": "dataset/unchecked_low_level_calls/0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol",
  "duration": 98.63018012046814,
  "end": 1654179807.017602,
  "exit_code": 0,
  "start": 1654179708.3874218,
  "tool": "mythril"
}