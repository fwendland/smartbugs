{
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 549,
        "code": "tx.origin",
        "debug": "",
        "description": "Function setLog(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "setLog(address)",
        "lineno": 19,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 800,
        "code": "msg.sender.call.value(_am)()",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "CashOut(uint256)",
        "lineno": 52,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 800,
        "code": "msg.sender.call.value(_am)()",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1142\n",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "CashOut(uint256)",
        "lineno": 52,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1142,
        "code": "TransferLog.AddMessage(msg.sender,_am,\"CashOut\")",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `setLog(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "CashOut(uint256)",
        "lineno": 55,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1142,
        "code": "TransferLog.AddMessage(msg.sender,_am,\"CashOut\")",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function CashOut(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "CashOut(uint256)",
        "lineno": 55,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1248,
        "code": "balances[msg.sender]+=msg.value",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x6fa613b31105f33968dfdfd25de19aceb682c10d6428182e2082d401048be3f8\ncallvalue: 0xff8dd1180277f6048eff0ba68dfa1b212642db55a4c1650e814d13480aebfbdb\nstorage_1: 0xff8dd1180277f6048eff0ba68dfa1b212642db55a4c1650e814d13480aebfbdb\ncalldata_PrivateDeposit_0: 0xed21248c00000000000000000000000000000000000000000000000000000000\ncalldatasize_PrivateDeposit: 0x4\n",
        "description": "A possible integer overflow exists in the function `Deposit()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "Deposit()",
        "lineno": 42,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1512,
        "code": "TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\")",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `setLog(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "Deposit()",
        "lineno": 43,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1512,
        "code": "TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\")",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function Deposit(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/data/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
        "function": "Deposit()",
        "lineno": 43,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  },
  "contract": "dataset/reentrancy/0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol",
  "duration": 7.822760820388794,
  "end": 1654006862.8750422,
  "exit_code": 0,
  "start": 1654006855.0522814,
  "tool": "mythril"
}