{
    "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
    "runs": [
        {
            "results": [
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract EBU, function transfer(address,address,address[],uint256[])"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol"
                                },
                                "region": {
                                    "startLine": 11
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract EBU, function transfer(address,address,address[],uint256[])"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol"
                                },
                                "region": {
                                    "startLine": 14
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract EBU, function transfer(address,address,address[],uint256[])"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol"
                                },
                                "region": {
                                    "startLine": 16
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_External_Call_To_User_Supplied_Address"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract EBU, function transfer(address,address,address[],uint256[])"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol"
                                },
                                "region": {
                                    "startLine": 16
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_Multiple_Calls_in_a_Single_Transaction"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract EBU, function transfer(address,address,address[],uint256[])"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol"
                                },
                                "region": {
                                    "startLine": 16
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Unchecked_return_value_from_external_call"
                }
            ],
            "tool": {
                "driver": {
                    "informationUri": "https://github.com/ConsenSys/mythril",
                    "name": "Mythril",
                    "rules": [
                        {
                            "fullDescription": {
                                "text": "The return value of a message call is not checked. External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails. Classification: SWC-104. Detection method: Test whether CALL return value is checked. For direct calls, the Solidity compiler auto-generates this check. For low-level-calls this check is omitted."
                            },
                            "help": {
                                "text": "External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails."
                            },
                            "id": "mythril_0_23_5_Unchecked_return_value_from_external_call",
                            "name": "Unchecked return value from external call.",
                            "properties": {
                                "security-severity": "5.5"
                            },
                            "shortDescription": {
                                "text": "The return value of a message call is not checked."
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "Multiple calls are executed in the same transaction. This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase). Classification: SWC-113. Detection method: Check for multiple sends in a single transaction"
                            },
                            "help": {
                                "text": "This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase)."
                            },
                            "id": "mythril_0_23_5_Multiple_Calls_in_a_Single_Transaction",
                            "name": "Multiple Calls in a Single Transaction",
                            "properties": {
                                "security-severity": "2.0"
                            },
                            "shortDescription": {
                                "text": "Multiple calls are executed in the same transaction."
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "A call to a user-supplied address is executed. An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place. Classification: SWC-107. Detection method: Search for external calls with unrestricted gas to a user-specified address."
                            },
                            "help": {
                                "text": "An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place."
                            },
                            "id": "mythril_0_23_5_External_Call_To_User_Supplied_Address",
                            "name": "External Call To User-Supplied Address",
                            "properties": {
                                "security-severity": "2.0"
                            },
                            "shortDescription": {
                                "text": "A call to a user-supplied address is executed."
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "The arithmetic operator can underflow/overflow It is possible to cause an integer overflow or underflow in the arithmetic operation. Prevent this by constraining inputs using the require() statement or use the OpenZeppelin SafeMath library for integer arithmetic operations. Refer to the transaction trace generated for this issue to reproduce the issue. Classification: SWC-101. Detection method: For every SUB instruction, check if there is a possible state where the second operand is larger than the first one. For every ADD, MUL instruction, check if there is a possible state where the result of the operation overflows."
                            },
                            "help": {
                                "text": "It is possible to cause an integer overflow or underflow in the arithmetic operation. Prevent this by constraining inputs using the require() statement or use the OpenZeppelin SafeMath library for integer arithmetic operations. Refer to the transaction trace generated for this issue to reproduce the issue."
                            },
                            "id": "mythril_0_23_5_Integer_Arithmetic_Bugs",
                            "name": "Integer Arithmetic Bugs",
                            "properties": {
                                "security-severity": "8.0"
                            },
                            "shortDescription": {
                                "text": "The arithmetic operator can underflow/overflow"
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "An assertion violation was triggered. It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). Classification: SWC-110. Detection method: Checks whether any exception states are reachable."
                            },
                            "help": {
                                "text": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."
                            },
                            "id": "mythril_0_23_5_Exception_State",
                            "name": "Exception State",
                            "properties": {
                                "security-severity": "5.5"
                            },
                            "shortDescription": {
                                "text": "An assertion violation was triggered."
                            }
                        }
                    ],
                    "version": "0.23.5"
                }
            }
        }
    ],
    "version": "2.1.0"
}
