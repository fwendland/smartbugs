{
    "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
    "runs": [
        {
            "results": [
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Puppet, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 102
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Unchecked_return_value_from_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract 0x72c68108a82e82617b93d1be0d7975d762035015, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 35
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Unchecked_return_value_from_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract 0xc9ee761b11a3ef990f3c432e7791f1312406bdf3, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 35
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Unchecked_return_value_from_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract 0x9ef9f8c1700966926657d82dd4bc01f6ad711386, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 35
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Unchecked_return_value_from_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract 0xee7a53a2a16c453f6cb4205286e90b50c5c0b8d5, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 35
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Unchecked_return_value_from_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function puppets(uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 12
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 71
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 71
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 71
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_Multiple_Calls_in_a_Single_Transaction"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 71
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 73
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 73
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 73
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 75
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 75
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract Splitter, function fundPuppets()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/unchecked_low_level_calls/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol"
                                },
                                "region": {
                                    "startLine": 75
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_State_access_after_external_call"
                }
            ],
            "tool": {
                "driver": {
                    "informationUri": "https://github.com/ConsenSys/mythril",
                    "name": "Mythril",
                    "rules": [
                        {
                            "fullDescription": {
                                "text": "Multiple calls are executed in the same transaction. This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase). Classification: SWC-113. Detection method: Check for multiple sends in a single transaction"
                            },
                            "help": {
                                "text": "This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase)."
                            },
                            "id": "mythril_0_23_5_Multiple_Calls_in_a_Single_Transaction",
                            "name": "Multiple Calls in a Single Transaction",
                            "properties": {
                                "security-severity": "2.0"
                            },
                            "shortDescription": {
                                "text": "Multiple calls are executed in the same transaction."
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "Read of/Write to persistent state following external call The contract account state is accessed after an external call to a user-defined/fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. Classification: SWC-107. Detection method: Check whether the account state is accesses after the execution of an external call"
                            },
                            "help": {
                                "text": "The contract account state is accessed after an external call to a user-defined/fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state."
                            },
                            "id": "mythril_0_23_5_State_access_after_external_call",
                            "name": "State access after external call",
                            "shortDescription": {
                                "text": "Read of/Write to persistent state following external call"
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "An assertion violation was triggered. It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). Classification: SWC-110. Detection method: Checks whether any exception states are reachable."
                            },
                            "help": {
                                "text": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."
                            },
                            "id": "mythril_0_23_5_Exception_State",
                            "name": "Exception State",
                            "properties": {
                                "security-severity": "5.5"
                            },
                            "shortDescription": {
                                "text": "An assertion violation was triggered."
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "The return value of a message call is not checked. External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails. Classification: SWC-104. Detection method: Test whether CALL return value is checked. For direct calls, the Solidity compiler auto-generates this check. For low-level-calls this check is omitted."
                            },
                            "help": {
                                "text": "External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails."
                            },
                            "id": "mythril_0_23_5_Unchecked_return_value_from_external_call",
                            "name": "Unchecked return value from external call.",
                            "properties": {
                                "security-severity": "5.5"
                            },
                            "shortDescription": {
                                "text": "The return value of a message call is not checked."
                            }
                        }
                    ],
                    "version": "0.23.5"
                }
            }
        }
    ],
    "version": "2.1.0"
}
