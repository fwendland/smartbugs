{
    "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
    "runs": [
        {
            "results": [
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function setBetMax(uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 298
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function transferFrom(address,address,uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 84
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 646
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function playSystem(uint256,address)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 646
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function playRandom(address)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 646
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function play()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 646
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 646
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120\nSeverity: Low"
                    },
                    "ruleId": "mythril_0_23_5_Dependence_on_predictable_environment_variable"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function fallback"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 647
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function playSystem(uint256,address)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 647
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function playRandom(address)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 647
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function play()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 647
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function changeAnimator(address)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 278
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function resetBet()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 305
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function resetBet()"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 306
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101\nSeverity: High"
                    },
                    "ruleId": "mythril_0_23_5_Integer_Arithmetic_Bugs"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function hashes(uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 155
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function dividends(uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 146
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function changeOwner(address)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 267
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function transfer(address,uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 51
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function coldStore(uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 316
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function setInvestStart(uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 289
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function transfer(address,uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 53
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                },
                {
                    "locations": [
                        {
                            "message": {
                                "text": "contract SmartBillions, function transferFrom(address,address,uint256)"
                            },
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "dataset/bad_randomness/smart_billions.sol"
                                },
                                "region": {
                                    "startLine": 89
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110\nSeverity: Medium"
                    },
                    "ruleId": "mythril_0_23_5_Exception_State"
                }
            ],
            "tool": {
                "driver": {
                    "informationUri": "https://github.com/ConsenSys/mythril",
                    "name": "Mythril",
                    "rules": [
                        {
                            "fullDescription": {
                                "text": "An assertion violation was triggered. It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). Classification: SWC-110. Detection method: Checks whether any exception states are reachable."
                            },
                            "help": {
                                "text": "It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values)."
                            },
                            "id": "mythril_0_23_5_Exception_State",
                            "name": "Exception State",
                            "properties": {
                                "security-severity": "5.5"
                            },
                            "shortDescription": {
                                "text": "An assertion violation was triggered."
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "The arithmetic operator can underflow/overflow It is possible to cause an integer overflow or underflow in the arithmetic operation. Prevent this by constraining inputs using the require() statement or use the OpenZeppelin SafeMath library for integer arithmetic operations. Refer to the transaction trace generated for this issue to reproduce the issue. Classification: SWC-101. Detection method: For every SUB instruction, check if there is a possible state where the second operand is larger than the first one. For every ADD, MUL instruction, check if there is a possible state where the result of the operation overflows."
                            },
                            "help": {
                                "text": "It is possible to cause an integer overflow or underflow in the arithmetic operation. Prevent this by constraining inputs using the require() statement or use the OpenZeppelin SafeMath library for integer arithmetic operations. Refer to the transaction trace generated for this issue to reproduce the issue."
                            },
                            "id": "mythril_0_23_5_Integer_Arithmetic_Bugs",
                            "name": "Integer Arithmetic Bugs",
                            "properties": {
                                "security-severity": "8.0"
                            },
                            "shortDescription": {
                                "text": "The arithmetic operator can underflow/overflow"
                            }
                        },
                        {
                            "fullDescription": {
                                "text": "A control flow decision is made based on the block variable coinbase, gaslimit, timestamp or block number. One or more of block.coinbase, block.gaslimit, block.timestamp or block.number are used to determine a control flow decision. Note that the values of these variables are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners. Classification: SWC-116 if the control flow depends on block.timestamp, and SWC-120 otherwise. Detection method: Check whether control flow decisions are influenced by block.coinbase, block.gaslimit, block.timestamp or block.number."
                            },
                            "help": {
                                "text": "One or more of block.coinbase, block.gaslimit, block.timestamp or block.number are used to determine a control flow decision. Note that the values of these variables are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners."
                            },
                            "id": "mythril_0_23_5_Dependence_on_predictable_environment_variable",
                            "name": "Dependence on predictable environment variable",
                            "properties": {
                                "security-severity": "2.0"
                            },
                            "shortDescription": {
                                "text": "A control flow decision is made based on the block variable coinbase, gaslimit, timestamp or block number."
                            }
                        }
                    ],
                    "version": "0.23.5"
                }
            }
        }
    ],
    "version": "2.1.0"
}
